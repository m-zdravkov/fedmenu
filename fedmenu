#!/bin/bash
# fedmenu - File Explorer for dmenu

# Config
file_explorer=thunar
terminal_execute="xfce4-terminal -e"
terminal_cd="xfce4-terminal --working-directory"
viewer=xviewer
reader=xreader
mplayer=vlc
vplayer=vlc
office=libreoffice
dmenu_sb="#396535"
dmenu_sf_notify="#FF6"
dmenu_sb_notify="#656535"
dmenu_fn="DejaVu Sans Mono-8"
dmenu_launch="dmenu -sb \"$dmenu_sb\" -fn \"$dmenu_fn\" -i -l 9"

item_open="⮡ Open with ..."
item_back=" Back to directory"
item_open_explorer=" Open in file explorer"
item_open_vim=" Open in Vim"
item_open_xfce4_terminal=" Open in xfce4-terminal"
item_exec=" Execute (bash)"
item_reader=" Open with "$reader
item_viewer=" Open with "$viewer
item_vplayer=" Watch in "$vplayer
item_mplayer=" Play in "$mplayer
item_audacity=" Open in audacity"
item_office=" Open in "$office
item_copypaste=" Copy-paste (cp)"
item_copycontents=" Copy contents to clipboard"
item_move=" Move (mv)"
item_selectfile=" Select file"
item_selectdirectory=" Select directory"
item_pastehere=" Paste in here"
item_mkdir=" New directory (mkdir)"
item_rm=" Remove (rm)"
item_rmdir=" Remove empty directory (rmdir)"
# rm -rf is avoided on purpose! Use "Open with..." and type out the command if you really must. It's not something you want to do too quickly...
item_touch=" New empty file (touch)"
item_cancel="× Cancel"
item_cancelstay="⮡ Cancel and stay in current location"

dmenu_launch() {
	dmenu -sb "$dmenu_sb" -fn "$dmenu_fn" -i -l 9 -p "$1"
}

prompt_confirm() {
	echo -e "No\nYes" | dmenu -sb "$dmenu_sb" -fn "$dmenu_fn" -i -p "$1"
}

notify() {
	dmenu -sb "$dmenu_sb_notify" -sf "$dmenu_sf_notify" -nf "#222" -nb "#222" -fn "$dmenu_fn" -i -p "$1"
}

# Set CWD to a normalized path if the argument starts with '.' to avoid errors
[[ $1 == .* ]] && CWD=`realpath "$1"` || CWD=$1

# Start from pwd if no file/directory is supplied
[[ -z $1 ]] && CWD=$(pwd)

# Modes: normal (explorer), select
mode_normal=explorer
mode_select=select
mode_paste=paste

if [ -z $2 ];
then
	mode=$mode_normal
else
	mode=$2
fi

declare -a items
if [ -d "$CWD" ];
then
	# If item is a directory
	is_directory=true

	case "$mode" in
		$mode_normal)
			# Normal options (directory)

			items+=("$(ls "$CWD" -a)") # All files and directories
			items+=("$item_open_explorer")
			items+=("$item_open_xfce4_terminal")
			items+=("$item_open")
			items+=("$item_copypaste")
			items+=("$item_move")
			items+=("$item_touch")
			;;
		$mode_select)
			items+=("$(ls "$CWD" -a)") # All files and directories
			items+=("$item_selectdirectory")
			items+=("$item_cancel")
			items+=("$item_cancelstay")
			;;
		$mode_paste)
			items+=".."
			items+=("$(find "$CWD/" -maxdepth 1 -mindepth 1 -type d,l -printf "%f\n" | sort)") # Directories only
			#unset "items[0]" # Remove first item (empty line from find function)
			items+=("$item_pastehere")
			items+=("$item_cancel")
			items+=("$item_cancelstay")
			;;
	esac
	
	# Global options (all modes, directory)
	items+=("$item_mkdir")
	[ ! "$(ls -A $CWD)" ] && items+=("$item_rmdir")
else
	# If item is a file

	if [ "$mode" == "$mode_paste" ];
	then
		exec dmenu -p "fedmenu internal error: can not paste into file" -sb "#AA0000"
		exit 1 # ERROR
	fi

	is_file=true
	items+=("$item_open")
	items+=("$item_open_vim")
	[ -x "$CWD" ] && items+=("$item_exec")
	
	case $mode in
		$mode_normal)
			# Normal options (file)
			case "${CWD##*.}" in
				"pdf")
					items+=("$item_reader")
					;;
				"jpg" | "jpeg" | "gif" | "png")
					items+=("$item_viewer")
					;;
				"mp3" | "ogg" | "wav" | "m4a" | "opus")
					items+=("$item_mplayer")
					;;
				"mp4" | "mkv" | "avi")
					items+=("$item_vplayer")
					;;
				"aup")
					items+=("$item_audacity")
					;;
				"odt" | "ods" | "doc" | "docx" | "xls" | "xlsx")
					items+=("$item_office")
					;;
			esac
			items+=("$item_rm")
			items+=("$item_copypaste")
			items+=("$item_copycontents")
			items+=("$item_move")
			;;
		$mode_select)
			items+=("$item_selectfile")
			items+=("$item_cancel")
			items+=("$item_cancelstay")
			;;
		$mode_paste)
			items+=("$item_cancel")
			items+=("$item_cancelstay")
			;;
	esac

	# Global options (all modes, file)
	items+=("$item_back")
fi

prompt=""
[ -f "$CWD" ] && prompt=""

case $mode in
	$mode_select)
		prompt="Select ${prompt}"
		;;
	$mode_paste)
		prompt="Paste ${prompt}"
		;;
esac

item=$(printf "%s\n" "${items[@]}" | eval "$dmenu_launch -p \"$prompt $CWD\"")

# Exit on Esc
[ -z "$item" ] && exit

# Relocate (handle copy or move)
relocate() {
	case "$1" in
		"copy") cp -R "$2" "$3";;
		"move") mv "$2" "$3";;
		"copy-update") cp -uR "$2" "$3";;
		"move-force") mv -r "$2" "$3";;
	esac
}

popdir() {
	dir=$(dirname "$CWD")
	cd "$dir"
	exec fedmenu "$dir" $mode
}

# Handle selected option or continue with selected file/directory
case $item in

	$item_back | '..')
		popdir
		;;
	$item_open)
		exec $(compgen -c | eval "$dmenu_launch -p \"Open '$CWD' with\"") "$CWD"
		;;
	$item_open_explorer)
		exec $file_explorer "$CWD"
		;;
	$item_open_vim)
		exec $terminal_execute "vim $CWD"
		;;
	$item_open_xfce4_terminal)
		exec $terminal_cd "$CWD"
		;;
	$item_exec)
		exec "$CWD"
		;;
	$item_reader)
		exec $reader "$CWD"
		;;
	$item_viewer)
		exec $viewer "$CWD"
		;;
	$item_mplayer)
		exec $mplayer "$CWD"
		;;
	$item_vplayer)
		exec $vplayer "$CWD"
		;;
	$item_audacity)
		exec audacity "$CWD"
		;;
	$item_office)
		exec $office "$CWD"
		;;
	$item_copypaste)
		file_name=${CWD##*/}
		location=$(fedmenu "$(pwd)" $mode_paste)
		[[ -z $location ]] && exec fedmenu "$CWD" # Cancel on empty location
		[[ "$location" == "$item_cancel" ]] && exec fedmenu "$CWD"
		[[ "$location" == "$item_cancelstay" ]] && exec fedmenu "$location"
		[[ ! -d $location ]] && popdir # Return on non-existing path
		[[ -f "${location}/${file_name}" ]] && [ prompt_confirm "Update ${location}/${file_name}?" == "Yes" ] && $(relocate "copy-update" "$CWD" "$location") && exec exit 0
		$(relocate "copy" "$CWD" "$location")
		;;
	$item_move)
		if [ "$CWD" == "$HOME" ]; then exec fedmenu "$CWD" # Don't end up homeless… 
		fi
		file_name=${CWD##*/}
		location=$(fedmenu "$(pwd)" $mode_paste)
		[[ -z $location ]] && exec fedmenu "$CWD" # Cancel on empty location
		[[ "$location" == "$item_cancel" ]] && exec fedmenu "$CWD"
		[[ "$location" == "$item_cancelstay" ]] && exec fedmenu "$location"
		[[ ! -d $location ]] && popdir # Return on non-existing path
		[[ -f "${location}/${file_name}" ]] && [ $(prompt_confirm "Replace ${location}/${file_name}?") == "Yes" ] && $(relocate "move-force" "$CWD" "$location") && exec exit 0
		$(relocate "move" "$CWD" "$location")
		;;
	$item_pastehere)
		exec echo "$CWD"
		;;
	$item_selectdirectory | $item_selectfile)
		exec echo "$CWD"
		;;
	$item_rm)
		[ $(prompt_confirm "Remove '$CWD'?") == "Yes" ] && rm "$CWD"
		popdir
		;;
	$item_rmdir)
		[ $(prompt_confirm "Remove '$CWD'?") == "Yes" ] && rmdir "$CWD"
		popdir
		;;
	$item_mkdir)
		name=$(dmenu_launch " … New directory: $(pwd)/")
		[ ! -z "$name" ] && mkdir "$name"
		exec fedmenu "$CWD/$name" "$mode"
		;;
	$item_touch)
		name=$(dmenu_launch " … New file: $(pwd)/")
		[ ! -z "$name" ] && touch "$name" || exec fedmenu "$CWD"
		exec fedmenu "$CWD/$name" "$mode"
		;;
	$item_cancel)
		echo $item_cancel
		;;
	$item_cancelstay)
		echo $item_cancelstay
		;;
	$item_copycontents)
		# Doesn't work, as xclip forgets clipboard when dmenu closes
		[ -f "$CWD" ] && xclip -sel c < "$CWD"
		;;
	'.')
		# Ignore move to current directory
		exec fedmenu "$CWD" "$mode"
		;;
	*)
		# Append item name to the path and continue
		item="$CWD/$item"
		[ -d "$item" ] && cd "$item"
		exec fedmenu "$item" "$mode"
		;;
esac

